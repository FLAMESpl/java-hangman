package pl.wikihangman.views.swing;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.JSlider;
import pl.wikihangman.client.ServerCommand;
import pl.wikihangman.client.ServerResponse;
import pl.wikihangman.client.TcpClient;
import pl.wikihangman.protocol.ProtocolParseException;
import pl.wikihangman.views.logging.ConfirmationsEnum;
import pl.wikihangman.views.logging.ErrorsEnum;
import pl.wikihangman.views.swing.helpers.OptionPaneHelpers;

/**
 *
 * Main window of the application. Starts with {@code LoginPanel} loaded.
 * 
 * @author ≈Åukasz Szafirski
 * @version 1.0.0.0
 */
public class HomeFrame extends javax.swing.JFrame {

    private final static String DEFAULT_IP = "localhost";
    private final static int DEFAULT_PORT = 8888;
    private final static String FRAME_TITLE = "WikiHangman";
    private TcpClient client;
    
    /**
     * Creates new form HomeFrame
     * 
     * @param ip tcp server's ip
     * @param port tcp server's port
     */
    public HomeFrame(String ip, int port) {
        setTitle(FRAME_TITLE);
        try {
            client = new TcpClient(ip, port);
        } catch (IOException exception) {
            OptionPaneHelpers.showErrorMessage(this, ErrorsEnum.SOCKET_INIT);
            System.exit(-1);
        }
        initComponents();
        init();
    }
    
    /**
     * Non-designer initialization part of component.
     */
    private void init() {
        LoginPanel loginPanel = new LoginPanel(client);
        setMainPanel(loginPanel);
    }
    
    /**
     * Activates given panel in this frame. Only one panel can be active at time.
     * 
     * @param panel panel to activate
     */
    private void setMainPanel(AppPanel panel) {
        mainPanel.addContainerListener(panel);
        mainPanel.removeAll();
        mainPanel.revalidate();
        mainPanel.repaint();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(panel);
    }
    
    /**
     * Log outs actvie user cached in server socket.
     */
    private void logOut() {
        
        try {
            client.send(ServerCommand.LOGOUT);
            ServerResponse response = client.receive();
            OptionPaneHelpers.showResponseMessage(null, response, ConfirmationsEnum.USER_LOGGED_OUT);
        } catch(IOException | ProtocolParseException exception) {
            OptionPaneHelpers.showErrorMessage(this, ErrorsEnum.COMMUNICATION);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        toolBarButtonNewHangman = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        livesLabel = new javax.swing.JLabel();
        livesSlider = new javax.swing.JSlider();
        toolBarButtonScoreBoard = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        gameMenuItem = new javax.swing.JMenuItem();
        logInlogOutMenuItem = new javax.swing.JMenuItem();
        logOutMenuItem = new javax.swing.JMenuItem();
        scoreboardMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);

        toolBarButtonNewHangman.setText("New hangman");
        toolBarButtonNewHangman.setFocusable(false);
        toolBarButtonNewHangman.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarButtonNewHangman.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarButtonNewHangman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarButtonNewHangmanActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarButtonNewHangman);

        jLabel1.setText("Amount of lives:");
        jToolBar1.add(jLabel1);

        livesLabel.setText("10");
        livesLabel.setMaximumSize(new java.awt.Dimension(20, 14));
        livesLabel.setMinimumSize(new java.awt.Dimension(20, 14));
        livesLabel.setPreferredSize(new java.awt.Dimension(20, 14));
        jToolBar1.add(livesLabel);

        livesSlider.setMajorTickSpacing(1);
        livesSlider.setMaximum(10);
        livesSlider.setMinimum(1);
        livesSlider.setSnapToTicks(true);
        livesSlider.setMaximumSize(new java.awt.Dimension(120, 26));
        livesSlider.setPreferredSize(new java.awt.Dimension(120, 26));
        livesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                livesSliderStateChanged(evt);
            }
        });
        jToolBar1.add(livesSlider);

        toolBarButtonScoreBoard.setText("Score board");
        toolBarButtonScoreBoard.setFocusable(false);
        toolBarButtonScoreBoard.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toolBarButtonScoreBoard.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarButtonScoreBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarButtonScoreBoardActionPerformed(evt);
            }
        });
        jToolBar1.add(toolBarButtonScoreBoard);

        mainPanel.setToolTipText("WikiHangman");
        mainPanel.setName("WikiHangman"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        gameMenu.setMnemonic('f');
        gameMenu.setText("Game");

        gameMenuItem.setText("New");
        gameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(gameMenuItem);

        logInlogOutMenuItem.setText("Log in");
        logInlogOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInlogOutMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(logInlogOutMenuItem);

        logOutMenuItem.setText("Log out");
        logOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(logOutMenuItem);

        scoreboardMenuItem.setText("Score board");
        scoreboardMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreboardMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(scoreboardMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(exitMenuItem);

        menuBar.add(gameMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void scoreboardMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreboardMenuItemActionPerformed
        setMainPanel(new ScoreBoardPanel(client).displayScoreBoard());
    }//GEN-LAST:event_scoreboardMenuItemActionPerformed

    private void logInlogOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInlogOutMenuItemActionPerformed
        setMainPanel(new LoginPanel(client));
    }//GEN-LAST:event_logInlogOutMenuItemActionPerformed

    private void gameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameMenuItemActionPerformed
        setMainPanel(new GamePanel(client).startHangman(livesSlider.getValue()));
    }//GEN-LAST:event_gameMenuItemActionPerformed

    private void toolBarButtonNewHangmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarButtonNewHangmanActionPerformed
        setMainPanel(new GamePanel(client).startHangman(livesSlider.getValue()));
    }//GEN-LAST:event_toolBarButtonNewHangmanActionPerformed

    private void toolBarButtonScoreBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarButtonScoreBoardActionPerformed
        setMainPanel(new ScoreBoardPanel(client).displayScoreBoard());
    }//GEN-LAST:event_toolBarButtonScoreBoardActionPerformed

    private void logOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutMenuItemActionPerformed
        logOut();
        setMainPanel(new LoginPanel(client));
    }//GEN-LAST:event_logOutMenuItemActionPerformed

    private void livesSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_livesSliderStateChanged
        JSlider slider = (JSlider)evt.getSource();
        livesLabel.setText(Integer.toString(slider.getValue()));
    }//GEN-LAST:event_livesSliderStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        AtomicReference<String> ip = new AtomicReference<>(DEFAULT_IP);
        AtomicInteger port = new AtomicInteger(DEFAULT_PORT);
        
        if (args.length >= 2) {
            try {
                ip.set(args[0]);
                port.set(Integer.parseInt(args[1]));
            } catch (Exception ex) {
                OptionPaneHelpers.showErrorMessage(null, ErrorsEnum.APP_ARGS);
                System.exit(-1);
            }
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new HomeFrame(ip.get(), port.get()).setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenuItem gameMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel livesLabel;
    private javax.swing.JSlider livesSlider;
    private javax.swing.JMenuItem logInlogOutMenuItem;
    private javax.swing.JMenuItem logOutMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem scoreboardMenuItem;
    private javax.swing.JButton toolBarButtonNewHangman;
    private javax.swing.JButton toolBarButtonScoreBoard;
    // End of variables declaration//GEN-END:variables

}
