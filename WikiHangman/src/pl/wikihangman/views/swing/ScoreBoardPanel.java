package pl.wikihangman.views.swing;

import java.io.IOException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import pl.wikihangman.client.ServerCommand;
import pl.wikihangman.client.ServerResponse;
import pl.wikihangman.client.TcpClient;
import pl.wikihangman.protocol.ProtocolParseException;
import pl.wikihangman.protocol.ProtocolResponse;
import pl.wikihangman.views.logging.ErrorsEnum;
import pl.wikihangman.views.swing.helpers.OptionPaneHelpers;

/**
 *
 * @author ≈Åukasz Szafirski
 * @version 1.0.0.0
 */
public class ScoreBoardPanel extends AppPanel {
    
    private final TcpClient client;
    
    /**
     * Creates new form ScoreBoardPanel
     * @param client tcp client to communicate with server
     */
    public ScoreBoardPanel(TcpClient client) {
        this.client = client;
        initComponents();
    }
    
    /**
     * Reads player's list from database and displays theirs score in the table.
     * @return this object
     */
    public ScoreBoardPanel displayScoreBoard() {
        
        ServerResponse activeUser = null;
        ServerResponse response = null;
        
        try {
            client.send(ServerCommand.AUTH);
            response = client.receive();
            ProtocolResponse type = response.getResponseType();
            switch (type) {
                default:
                case EXCEPTION:
                    OptionPaneHelpers.showResponseMessage(this, response);
                    return this;
                case FAIL:
                    activeUser = null;
                    break;
                case SUCCESS:
                    activeUser = response;
                    break;
            }
            
            client.send(ServerCommand.LIST);
            response = client.receive();
            if (response.getResponseType() != ProtocolResponse.SUCCESS) {
                OptionPaneHelpers.showResponseMessage(this, response);
                return this;
            }
        } catch (IOException | ProtocolParseException exception) {
            OptionPaneHelpers.showErrorMessage(this, ErrorsEnum.COMMUNICATION);
        }
        
        try {
            fillTable(activeUser, response);
        } catch (IndexOutOfBoundsException exception) {
            OptionPaneHelpers.showErrorMessage(this, ErrorsEnum.COMMUNICATION);
        }
        return this;
    }
    
    private void fillTable(ServerResponse activeUser, ServerResponse usersList) 
        throws IndexOutOfBoundsException {
        
        if (activeUser != null) {
            userScoreLabel.setText(activeUser.getStringToken(2));
        }
        DefaultTableModel model = (DefaultTableModel)scoreBoardTable.getModel();
        int i = 0;
        while (i < usersList.getLength()) {
            i++; // skip user's id
            Object[] row = new Object[]{ usersList.getStringToken(i++), 
                                         usersList.getLongToken(i++) };
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scoreBoardTable = new javax.swing.JTable();
        userScoreLabel = new javax.swing.JLabel();

        scoreBoardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Player's name", "Points"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreBoardTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(scoreBoardTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userScoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable scoreBoardTable;
    private javax.swing.JLabel userScoreLabel;
    // End of variables declaration//GEN-END:variables
}
