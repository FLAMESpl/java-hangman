package pl.wikihangman.views.swing;

import pl.wikihangman.exceptions.SessionTerminatedException;
import pl.wikihangman.models.Letter;
import pl.wikihangman.models.User;
import pl.wikihangman.services.GameService;
import pl.wikihangman.views.logging.ErrorsEnum;
import pl.wikihangman.views.models.HangmanViewModel;
import pl.wikihangman.views.swing.helpers.OptionPaneHelpers;

/**
 * Presents and controlls hang-man session.
 * 
 * @author ≈Åukasz Szafirski
 * @version 1.0.0.0
 */
public class GamePanel extends AppPanel {
 
    private GameService gameService = null;
    private User activePlayer = null;
    private static final char UNDISCOVERED_CHAR = '_';
    
    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
    }
    
    /**
     * 
     * @param service Service responsible for handling game logic.
     * @return this object
     */
    public GamePanel setGameService(GameService service) {
        this.gameService = service;
        return this;
    }
    
    /**
     * 
     * @param activePlayer user playing hangman
     * @return this object
     */
    public GamePanel setActivePlayer(User activePlayer) {
        this.activePlayer = activePlayer;
        return this;
    }
    
    /**
     * Prepares hangman session and visual components in this panel.
     * 
     * @return this object
     */
    public GamePanel initHangman() {
        
        HangmanViewModel hangman = gameService.startNewSession(activePlayer.getId());
        formatHangmanView(hangman);
        return this;
    }
    
    /**
     * Tries to discover given letter and updates views on this panel.
     * 
     * @param character {@code char} to be discovered, case insensitive
     */
    private void tryDiscoverLetter(char character) {
        try {
            HangmanViewModel hangman = gameService.discoverLetter(
                activePlayer.getId(), character);
            formatHangmanView(hangman);
        } catch (SessionTerminatedException sessionTerminatedException) {
            OptionPaneHelpers.showErrorMessage(this, sessionTerminatedException);
        }
    }
    
    /**
     * Updates components on this panel to current state of hangman.
     * 
     * @param hangman source of data for views
     */
    private void formatHangmanView(HangmanViewModel hangman) {
        
        textAreaKeyword.setText(null);
        for (Letter letter : hangman.getKeyword()) {
            textAreaKeyword.append(String.format("%1$s ", 
                letter.isDiscovered() ? letter.getCharacter() : UNDISCOVERED_CHAR));
        }
        labelActualLivesAmount.setText(Integer.toString(hangman.getActualLives()));
        labelMaxLivesAmount.setText(Integer.toString(hangman.getMaxLives()));
    }
    
    
    /**
     * Invoked when parent controller removes this component from panel.
     * Requests game service to terminate session.
     */
    @Override
    public void removedFromPanel() {
        gameService.closeSession(activePlayer.getId());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelMaxLives = new javax.swing.JLabel();
        labelActualLives = new javax.swing.JLabel();
        labelMaxLivesAmount = new javax.swing.JLabel();
        labelActualLivesAmount = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaKeyword = new javax.swing.JTextArea();
        panelTextArea = new javax.swing.JPanel();
        labelInputCharacter = new javax.swing.JLabel();
        textFieldCharacterInput = new javax.swing.JTextField();
        buttonTryCharacter = new javax.swing.JButton();

        labelMaxLives.setText("Max lives:");

        labelActualLives.setText("Actual lives:");

        labelMaxLivesAmount.setText("0");

        labelActualLivesAmount.setText("0");

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        textAreaKeyword.setColumns(20);
        textAreaKeyword.setLineWrap(true);
        textAreaKeyword.setRows(5);
        jScrollPane1.setViewportView(textAreaKeyword);

        jSplitPane1.setTopComponent(jScrollPane1);

        labelInputCharacter.setText("Input character:");

        textFieldCharacterInput.setText("A");

        buttonTryCharacter.setText("Try");
        buttonTryCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTryCharacterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTextAreaLayout = new javax.swing.GroupLayout(panelTextArea);
        panelTextArea.setLayout(panelTextAreaLayout);
        panelTextAreaLayout.setHorizontalGroup(
            panelTextAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTextAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelInputCharacter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textFieldCharacterInput, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonTryCharacter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTextAreaLayout.setVerticalGroup(
            panelTextAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTextAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTextAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInputCharacter)
                    .addComponent(textFieldCharacterInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTryCharacter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(panelTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelMaxLives, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelActualLives, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMaxLivesAmount)
                            .addComponent(labelActualLivesAmount))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMaxLives)
                    .addComponent(labelMaxLivesAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelActualLives)
                    .addComponent(labelActualLivesAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonTryCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTryCharacterActionPerformed
        String input = textFieldCharacterInput.getText();
        if (input.length() == 1) {
            tryDiscoverLetter(input.charAt(0));
        } else {
            OptionPaneHelpers.showErrorMessage(this, ErrorsEnum.INPUT_NEED_SINGLE);
        }
    }//GEN-LAST:event_buttonTryCharacterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTryCharacter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labelActualLives;
    private javax.swing.JLabel labelActualLivesAmount;
    private javax.swing.JLabel labelInputCharacter;
    private javax.swing.JLabel labelMaxLives;
    private javax.swing.JLabel labelMaxLivesAmount;
    private javax.swing.JPanel panelTextArea;
    private javax.swing.JTextArea textAreaKeyword;
    private javax.swing.JTextField textFieldCharacterInput;
    // End of variables declaration//GEN-END:variables
}
